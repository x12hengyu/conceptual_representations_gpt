library(lsa)
packages.install("lsa")
install.packages("lsa")
library(lsa)
library(vegan)
install.packages("vegan")
library(lsa)
library(vegan)
library(ape)
install.packages("ape")
install.packages("psych")
library(lsa)
library(vegan)
library(ape)
library(psych)
library(ggplot2)
library(dendextend)
install.packages("dendextend")
install.packages("circlize")
library(lsa)
library(vegan)
library(ape)
library(psych)
library(ggplot2)
library(dendextend)
library(circlize)
library(grid)
library(tidyr)
library(lsa)
library(vegan)
library(ape)
library(psych)
library(ggplot2)
library(dendextend)
library(circlize)
library(grid)
library(tidyr)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
leuven_animals = read.csv('data/feature_listing/animal_leuven_norms.csv')
leuven_tools = read.csv('data/feature_listing/artifacts_leuven_norms.csv')
clip = read.csv('data/clip/clip_embeddings.csv')
w2v = read.csv('data/word2vec/word2vec_embeddings.csv')
human_triplet_mds = read.csv('data/triplets/summer_data/human_reptile_tool_embedding_df.csv')
gpt_triplet_mds = read.csv('data/triplets/summer_data/gpt_reptile_tool_embedding_df_temp0_cogsci2023.csv')
gpt_embed <- read.csv('data/gpt/gpt_embeddings_text-similarity-davinci-001.csv')
gpt_pairwise <- read.csv('data/pairwise/pairwise_response_1_7_davinci_003_matrix.csv')
leuven_animals = read.csv('data/feature_listing/animal_leuven_norms.csv')
leuven_tools = read.csv('data/feature_listing/artifacts_leuven_norms.csv')
clip = read.csv('data/clip/clip_embeddings.csv')
w2v = read.csv('data/word2vec/word2vec_embeddings.csv')
human_triplet_mds = read.csv('data/triplets/summer_data/human_reptile_tool_embedding_df.csv')
gpt_triplet_mds = read.csv('data/triplets/summer_data/gpt_reptile_tool_embedding_df_temp0_cogsci2023.csv')
gpt_embed <- read.csv('data/gpt/gpt_embeddings_text-similarity-davinci-001.csv')
gpt_pairwise <- read.csv('data/pairwise/pairwise_response_1_7_davinci_003_matrix.csv')
clip = clip[order(clip$X), ]
clip_dsm =1-lsa::cosine(t(data.matrix(clip[,2:ncol(clip)])))
clip_mds =  cmdscale(clip_dsm,k = 3)
rownames(clip_dsm) <- clip$X
rownames(clip_mds) <- clip$X
clip_mds <- clip_mds[order(rownames(clip_mds)),]
w2v = w2v[order(w2v$X), ]
w2v_dsm =1-lsa::cosine(t(data.matrix(w2v[,2:ncol(w2v)])))
# <!-- w2v_dsm = dist(w2v[,2:ncol(w2v)) -->
w2v_mds =  cmdscale(w2v_dsm,k = 3)
rownames(w2v_dsm) <- w2v$X
rownames(w2v_mds) <- w2v$X
w2v_mds <- w2v_mds[order(rownames(w2v_mds)),]
leuven = merge(leuven_animals, leuven_tools, by = 'X', all = TRUE)
leuven[is.na(leuven)] = 0
leuven_cosine_dist = 1-  lsa::cosine(t(data.matrix(leuven[,2:ncol(leuven)])))
leuven_mds <- cmdscale(leuven_cosine_dist,k = 3)
rownames(leuven_cosine_dist) <- leuven$X
rownames(leuven_mds) <- leuven$X
leuven_mds <- leuven_mds[order(rownames(leuven_mds)),]
flan_xl_verified = read.csv('data/feature_listing/flan_xl_wide.csv')
flan_xl_dsm = 1-  lsa::cosine(t(data.matrix(flan_xl_verified[,2:ncol(flan_xl_verified)])))
flan_xl_mds <- cmdscale(flan_xl_dsm,k = 3)
rownames(flan_xl_dsm) <- flan_xl_verified$Concept
rownames(flan_xl_mds) = rownames(flan_xl_dsm)
flan_xl_mds <- flan_xl_mds[order(rownames(flan_xl_mds)),]
flan_xxl_verified = read.csv('data/feature_listing/flan_xxl_wide.csv')
flan_xxl_dsm = 1-  lsa::cosine(t(data.matrix(flan_xxl_verified[,2:ncol(flan_xxl_verified)])))
flan_xxl_mds <- cmdscale(flan_xxl_dsm,k = 3)
rownames(flan_xxl_dsm) <- flan_xxl_verified$Concept
rownames(flan_xxl_mds) = rownames(flan_xxl_dsm)
flan_xxl_mds <- flan_xxl_mds[order(rownames(flan_xxl_mds)),]
gpt_summer_no_mc = read.csv('data/feature_listing/gpt_response_unverified_wide_no_matrix_completion.csv')
unverified_gpt_dsm = 1-  lsa::cosine(t(data.matrix(gpt_summer_no_mc[,2:ncol(gpt_summer_no_mc)])))
unverified_gpt_mds_summer_no_mc <- cmdscale(unverified_gpt_dsm,k = 3)
rownames(unverified_gpt_dsm) <- gpt_summer_no_mc$Concept
rownames(unverified_gpt_mds_summer_no_mc) = rownames(unverified_gpt_dsm)
unverified_gpt_mds_summer_no_mc <- unverified_gpt_mds_summer_no_mc[order(rownames(unverified_gpt_mds_summer_no_mc)),]
gpt_summer_no_mc = read.csv('data/feature_listing/gpt_response_yes_wide_no_matrix_completion.csv')
verified_gpt_dsm = 1-  lsa::cosine(t(data.matrix(gpt_summer_no_mc[,2:ncol(gpt_summer_no_mc)])))
verified_gpt_mds_summer_no_mc <- cmdscale(verified_gpt_dsm,k = 3)
rownames(verified_gpt_dsm) <- gpt_summer_no_mc$Concept
rownames(verified_gpt_mds_summer_no_mc) = rownames(verified_gpt_dsm)
verified_gpt_mds_summer_no_mc <- verified_gpt_mds_summer_no_mc[order(rownames(verified_gpt_mds_summer_no_mc)),]
rownames(human_triplet_mds) <- human_triplet_mds$concept
human_triplet_mds <- human_triplet_mds[order(rownames(human_triplet_mds)),]
human_triplet_mds <- human_triplet_mds[, 3:5]
human_triplet_cosine_dist = 1-  lsa::cosine(t(data.matrix(human_triplet_mds)))
rownames(human_triplet_cosine_dist) <- human_triplet_mds$concept
rownames(gpt_triplet_mds) <- gpt_triplet_mds$concept
gpt_triplet_mds <- gpt_triplet_mds[order(rownames(gpt_triplet_mds)),]
gpt_triplet_mds <- gpt_triplet_mds[, 3:5]
gpt_triplet_cosine_dist = 1-  lsa::cosine(t(data.matrix(gpt_triplet_mds)))
rownames(gpt_triplet_cosine_dist) <- gpt_triplet_mds$concept
matrices = list(leuven_mds, w2v_mds, clip_mds, unverified_gpt_mds_summer_no_mc, verified_gpt_mds_summer_no_mc, human_triplet_mds, gpt_triplet_mds, gpt_embed_mds, flan_xl_mds, flan_xxl_mds)
results = list()
for (i in 1:(length(matrices))) {
for (j in 1:(length(matrices))) {
# Pass the two matrices to the protest function and store the result
result = protest(matrices[[i]], matrices[[j]], symmetric=TRUE)
results = c(results, sqrt(1-result$ss))
}
}
## Create an empty list to store the results
results = list()
## Iterate through all combinations of the matrices
for (i in 1:(length(matrices))) {
for (j in 1:(length(matrices))) {
# Pass the two matrices to the protest function and store the result
result = protest(matrices[[i]], matrices[[j]], symmetric=TRUE)
results = c(results, sqrt(1-result$ss))
}
}
## Create a data frame with all possible combinations of matrix names
matrix_names = list("leuven", "w2v", "clip", "unverified_gpt_summer_no_mc", "verified_gpt_summer_no_mc", "human_triplet", "gpt_triplet", "gpt_embed_mds", "flan_xl_mds", "flan_xxl_mds")
matrix_combinations = expand.grid(matrix_names, matrix_names)
## Assign column names to the data frame
colnames(matrix_combinations) = c("matrix1", "matrix2")
## Fill in the values
k = 1
for (i in 1:length(matrix_names)) {
for (j in 1:length(matrix_names)) {
matrix_combinations[k, "result"] = results[k]
k = k + 1
}
}
clip = clip[order(clip$X), ]
clip_dsm =1-lsa::cosine(t(data.matrix(clip[,2:ncol(clip)])))
clip_mds =  cmdscale(clip_dsm,k = 3)
rownames(clip_dsm) <- clip$X
rownames(clip_mds) <- clip$X
clip_mds <- clip_mds[order(rownames(clip_mds)),]
clip = clip[order(clip$X), ]
clip_dsm =1-lsa::cosine(t(data.matrix(clip[,2:ncol(clip)])))
clip_mds =  cmdscale(clip_dsm,k = 3)
rownames(clip_dsm) <- clip$X
rownames(clip_mds) <- clip$X
clip_mds <- clip_mds[order(rownames(clip_mds)),]
clip_mds
rownames(gpt_pairwise) <- gpt_pairwise$concept
gpt_pairwise <- gpt_pairwise[order(rownames(gpt_pairwise)),]
gpt_pairwise <- gpt_pairwise[, 3:5]
gpt_pairwise_cosine_dist = 1-  lsa::cosine(t(data.matrix(gpt_pairwise)))
rownames(gpt_pairwise_cosine_dist) <- gpt_pairwise$concept
rownames(gpt_pairwise) <- gpt_pairwise$concept
gpt_pairwise <- gpt_pairwise[order(rownames(gpt_pairwise)),]
gpt_pairwise <- gpt_pairwise[, 3:5]
leuven_animals = read.csv('data/feature_listing/animal_leuven_norms.csv')
leuven_tools = read.csv('data/feature_listing/artifacts_leuven_norms.csv')
clip = read.csv('data/clip/clip_embeddings.csv')
w2v = read.csv('data/word2vec/word2vec_embeddings.csv')
human_triplet_mds = read.csv('data/triplets/summer_data/human_reptile_tool_embedding_df.csv')
gpt_triplet_mds = read.csv('data/triplets/summer_data/gpt_reptile_tool_embedding_df_temp0_cogsci2023.csv')
gpt_embed <- read.csv('data/gpt/gpt_embeddings_text-similarity-davinci-001.csv')
gpt_pairwise <- read.csv('data/pairwise/pairwise_response_1_7_davinci_003_matrix.csv')
rownames(gpt_triplet_mds) <- gpt_triplet_mds$concept
gpt_triplet_mds <- gpt_triplet_mds[order(rownames(gpt_triplet_mds)),]
gpt_triplet_mds <- gpt_triplet_mds[, 3:5]
gpt_triplet_cosine_dist = 1-  lsa::cosine(t(data.matrix(gpt_triplet_mds)))
rownames(gpt_triplet_cosine_dist) <- gpt_triplet_mds$concept
gpt_triplet_cosine_dist
gpt_triplet_mds
rownames(gpt_pairwise) <- gpt_pairwise$concept
gpt_pairwise <- gpt_pairwise[order(rownames(gpt_pairwise)),]
gpt_pairwise <- gpt_pairwise[, 3:5]
gpt_pairwise_cosine_dist = 1-  lsa::cosine(t(data.matrix(gpt_pairwise)))
rownames(gpt_pairwise_cosine_dist) <- gpt_pairwise$concept
gpt_pairwise
flan_xxl_verified = read.csv('data/feature_listing/flan_xxl_wide.csv')
flan_xxl_dsm = 1-  lsa::cosine(t(data.matrix(flan_xxl_verified[,2:ncol(flan_xxl_verified)])))
flan_xxl_mds <- cmdscale(flan_xxl_dsm,k = 3)
rownames(flan_xxl_dsm) <- flan_xxl_verified$Concept
rownames(flan_xxl_mds) = rownames(flan_xxl_dsm)
flan_xxl_mds <- flan_xxl_mds[order(rownames(flan_xxl_mds)),]
flan_xxl_mds
gpt_pairwise <- read.csv('data/pairwise/pairwise_response_1_7_davinci_003_matrix.csv')
gpt_pairwise_dsm = 1-lsa::cosine(t(data.matrix(gpt_pairwise[,2:ncol(gpt_pairwise)])))
gpt_pairwise_mds <- cmdscale(gpt_pairwise_dsm,k = 3)
rownames(gpt_pairwise_dsm) <- gpt_pairwise$Concept
rownames(gpt_pairwise_mds) = rownames(gpt_pairwise_dsm)
gpt_pairwise_mds <- gpt_pairwise_mds[order(rownames(gpt_pairwise_mds)),]
gpt_pairwise <- read.csv('data/pairwise/pairwise_response_1_7_davinci_003_matrix.csv')
gpt_pairwise_dsm = 1-lsa::cosine(t(data.matrix(gpt_pairwise[,ncol(gpt_pairwise)])))
gpt_pairwise_mds <- cmdscale(gpt_pairwise_dsm,k = 3)
rownames(gpt_pairwise_dsm) <- gpt_pairwise$Concept
rownames(gpt_pairwise_mds) = rownames(gpt_pairwise_dsm)
gpt_pairwise_mds <- gpt_pairwise_mds[order(rownames(gpt_pairwise_mds)),]
gpt_pairwise <- read.csv('data/pairwise/pairwise_response_1_7_davinci_003_matrix.csv')
gpt_pairwise_dsm = 1-lsa::cosine(t(data.matrix(gpt_pairwise[,2:ncol(gpt_pairwise)])))
gpt_pairwise_mds <- cmdscale(gpt_pairwise_dsm,k = 3)
rownames(gpt_pairwise_dsm) <- gpt_pairwise$Concept
rownames(gpt_pairwise_mds) = rownames(gpt_pairwise_dsm)
gpt_pairwise_mds <- gpt_pairwise_mds[order(rownames(gpt_pairwise_mds)),]
gpt_pairwise <- read.csv('data/pairwise/pairwise_response_1_7_davinci_003_matrix.csv')
gpt_pairwise
gpt_pairwise <- read.csv('data/pairwise/pairwise_response_1_7_davinci_003_matrix.csv')
gpt_pairwise[,2:ncol(gpt_pairwise)]
gpt_pairwise <- read.csv('data/pairwise/pairwise_response_1_7_davinci_003_matrix.csv')
gpt_pairwise[,1:ncol(gpt_pairwise)]
gpt_pairwise <- read.csv('data/pairwise/pairwise_response_1_7_davinci_003_matrix.csv')
gpt_pairwise[,2:ncol(gpt_pairwise)]
gpt_pairwise <- read.csv('data/pairwise/pairwise_response_1_7_davinci_003_matrix.csv')
gpt_pairwise_dsm = 1-lsa::cosine(t(data.matrix(gpt_pairwise[,2:ncol(gpt_pairwise)])))
gpt_pairwise_dsm
gpt_pairwise <- read.csv('data/pairwise/pairwise_response_1_7_davinci_003_matrix.csv')
gpt_pairwise_dsm = 1-lsa::cosine(t(data.matrix(gpt_pairwise[,2:ncol(gpt_pairwise)])))
gpt_pairwise_mds <- cmdscale(gpt_pairwise_dsm, k = 3)
gpt_pairwise_mds
gpt_pairwise <- read.csv('data/pairwise/pairwise_response_1_7_davinci_003_matrix.csv')
gpt_pairwise_dsm = 1-lsa::cosine(t(data.matrix(gpt_pairwise[,2:ncol(gpt_pairwise)])))
gpt_pairwise_mds <- cmdscale(gpt_pairwise_dsm, k = 3)
rownames(gpt_pairwise_dsm) <- gpt_pairwise$Concept
gpt_pairwise_dsm
gpt_pairwise <- read.csv('data/pairwise/pairwise_response_1_7_davinci_003_matrix.csv')
gpt_pairwise_dsm = 1-lsa::cosine(t(data.matrix(gpt_pairwise[,2:ncol(gpt_pairwise)])))
gpt_pairwise_mds <- cmdscale(gpt_pairwise_dsm, k = 3)
rownames(gpt_pairwise_dsm) <- gpt_pairwise$X
gpt_pairwise_dsm
gpt_pairwise <- read.csv('data/pairwise/pairwise_response_1_7_davinci_003_matrix.csv')
gpt_pairwise_dsm = 1-lsa::cosine(t(data.matrix(gpt_pairwise[,2:ncol(gpt_pairwise)])))
gpt_pairwise_mds <- cmdscale(gpt_pairwise_dsm, k = 3)
rownames(gpt_pairwise_dsm) <- gpt_pairwise$X
colnames(gpt_pairwise_dsm) <- gpt_pairwise$X
gpt_pairwise_dsm
gpt_pairwise <- read.csv('data/pairwise/pairwise_response_1_7_davinci_003_matrix.csv')
gpt_pairwise_dsm = 1-lsa::cosine(t(data.matrix(gpt_pairwise[,2:ncol(gpt_pairwise)])))
gpt_pairwise_mds <- cmdscale(gpt_pairwise_dsm, k = 3)
rownames(gpt_pairwise_dsm) <- gpt_pairwise$X
colnames(gpt_pairwise_dsm) <- gpt_pairwise$X
rownames(gpt_pairwise_mds) = rownames(gpt_pairwise_dsm)
gpt_pairwise_mds
flan_xxl_verified = read.csv('data/feature_listing/flan_xxl_wide.csv')
flan_xxl_dsm = 1-  lsa::cosine(t(data.matrix(flan_xxl_verified[,2:ncol(flan_xxl_verified)])))
flan_xxl_mds <- cmdscale(flan_xxl_dsm,k = 3)
rownames(flan_xxl_dsm) <- flan_xxl_verified$Concept
rownames(flan_xxl_mds) = rownames(flan_xxl_dsm)
flan_xxl_mds <- flan_xxl_mds[order(rownames(flan_xxl_mds)),]
flan_xxl_mds
gpt_pairwise <- read.csv('data/pairwise/pairwise_response_1_7_davinci_003_matrix.csv')
gpt_pairwise_dsm = 1-lsa::cosine(t(data.matrix(gpt_pairwise[,2:ncol(gpt_pairwise)])))
gpt_pairwise_mds <- cmdscale(gpt_pairwise_dsm, k = 3)
rownames(gpt_pairwise_dsm) <- gpt_pairwise$X
colnames(gpt_pairwise_dsm) <- gpt_pairwise$X
rownames(gpt_pairwise_mds) = rownames(gpt_pairwise_dsm)
gpt_pairwise_mds <- gpt_pairwise_mds[order(rownames(gpt_pairwise_mds)),]
gpt_pairwise_mds
gpt_pairwise <- read.csv('data/pairwise/pairwise_response_1_7_davinci_003_matrix.csv')
gpt_pairwise_dsm = 1-lsa::cosine(t(data.matrix(gpt_pairwise[,2:ncol(gpt_pairwise)])))
gpt_pairwise_mds <- cmdscale(gpt_pairwise_dsm, k = 3)
rownames(gpt_pairwise_dsm) <- gpt_pairwise$X
colnames(gpt_pairwise_dsm) <- gpt_pairwise$X
rownames(gpt_pairwise_mds) = rownames(gpt_pairwise_dsm)
gpt_pairwise_mds <- gpt_pairwise_mds[order(rownames(gpt_pairwise_mds)),]
gpt_pairwise_mds
#libraries
library(lsa)
library(vegan)
library(ape)
library(psych)
library(ggplot2)
library(dendextend)
library(circlize)
library(grid)
library(tidyr)
# feature list humans (leuven) vs feature list gpt
# set working dir to the dir the script is in
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# Load data
leuven_animals = read.csv('data/feature_listing/animal_leuven_norms.csv')
leuven_tools = read.csv('data/feature_listing/artifacts_leuven_norms.csv')
clip = read.csv('data/clip/clip_embeddings.csv')
w2v = read.csv('data/word2vec/word2vec_embeddings.csv')
human_triplet_mds = read.csv('data/triplets/summer_data/human_reptile_tool_embedding_df.csv')
gpt_triplet_mds = read.csv('data/triplets/summer_data/gpt_reptile_tool_embedding_df_temp0_cogsci2023.csv')
gpt_embed <- read.csv('data/gpt/gpt_embeddings_text-similarity-davinci-001.csv')
gpt_pairwise <- read.csv('data/pairwise/pairwise_response_1_7_davinci_003_matrix.csv')
# clip_data
clip = clip[order(clip$X), ]
clip_dsm =1-lsa::cosine(t(data.matrix(clip[,2:ncol(clip)])))
clip_mds =  cmdscale(clip_dsm,k = 3)
rownames(clip_dsm) <- clip$X
rownames(clip_mds) <- clip$X
clip_mds <- clip_mds[order(rownames(clip_mds)),]
# gpt_embed_data
gpt_embed = gpt_embed[order(gpt_embed$X), ]
gpt_embed_dsm =1-lsa::cosine(t(data.matrix(gpt_embed[,2:ncol(gpt_embed)])))
gpt_embed_mds =  cmdscale(gpt_embed_dsm,k = 3)
rownames(gpt_embed_dsm) <- gpt_embed$X
rownames(gpt_embed_mds) <- gpt_embed$X
gpt_embed_mds <- gpt_embed_mds[order(rownames(gpt_embed_mds)),]
#word2vec_data
w2v = w2v[order(w2v$X), ]
w2v_dsm =1-lsa::cosine(t(data.matrix(w2v[,2:ncol(w2v)])))
# <!-- w2v_dsm = dist(w2v[,2:ncol(w2v)) -->
w2v_mds =  cmdscale(w2v_dsm,k = 3)
rownames(w2v_dsm) <- w2v$X
rownames(w2v_mds) <- w2v$X
w2v_mds <- w2v_mds[order(rownames(w2v_mds)),]
#leuven_data
leuven = merge(leuven_animals, leuven_tools, by = 'X', all = TRUE)
leuven[is.na(leuven)] = 0
leuven_cosine_dist = 1-  lsa::cosine(t(data.matrix(leuven[,2:ncol(leuven)])))
leuven_mds <- cmdscale(leuven_cosine_dist,k = 3)
rownames(leuven_cosine_dist) <- leuven$X
rownames(leuven_mds) <- leuven$X
leuven_mds <- leuven_mds[order(rownames(leuven_mds)),]
#flan_xl_verified
flan_xl_verified = read.csv('data/feature_listing/flan_xl_wide.csv')
flan_xl_dsm = 1-  lsa::cosine(t(data.matrix(flan_xl_verified[,2:ncol(flan_xl_verified)])))
flan_xl_mds <- cmdscale(flan_xl_dsm,k = 3)
rownames(flan_xl_dsm) <- flan_xl_verified$Concept
rownames(flan_xl_mds) = rownames(flan_xl_dsm)
flan_xl_mds <- flan_xl_mds[order(rownames(flan_xl_mds)),]
#flan_xxl_verified
flan_xxl_verified = read.csv('data/feature_listing/flan_xxl_wide.csv')
flan_xxl_dsm = 1-  lsa::cosine(t(data.matrix(flan_xxl_verified[,2:ncol(flan_xxl_verified)])))
flan_xxl_mds <- cmdscale(flan_xxl_dsm,k = 3)
rownames(flan_xxl_dsm) <- flan_xxl_verified$Concept
rownames(flan_xxl_mds) = rownames(flan_xxl_dsm)
flan_xxl_mds <- flan_xxl_mds[order(rownames(flan_xxl_mds)),]
#gpt unverified
gpt_summer_no_mc = read.csv('data/feature_listing/gpt_response_unverified_wide_no_matrix_completion.csv')
unverified_gpt_dsm = 1-  lsa::cosine(t(data.matrix(gpt_summer_no_mc[,2:ncol(gpt_summer_no_mc)])))
unverified_gpt_mds_summer_no_mc <- cmdscale(unverified_gpt_dsm,k = 3)
rownames(unverified_gpt_dsm) <- gpt_summer_no_mc$Concept
rownames(unverified_gpt_mds_summer_no_mc) = rownames(unverified_gpt_dsm)
unverified_gpt_mds_summer_no_mc <- unverified_gpt_mds_summer_no_mc[order(rownames(unverified_gpt_mds_summer_no_mc)),]
# gpt verified
gpt_summer_no_mc = read.csv('data/feature_listing/gpt_response_yes_wide_no_matrix_completion.csv')
verified_gpt_dsm = 1-  lsa::cosine(t(data.matrix(gpt_summer_no_mc[,2:ncol(gpt_summer_no_mc)])))
verified_gpt_mds_summer_no_mc <- cmdscale(verified_gpt_dsm,k = 3)
rownames(verified_gpt_dsm) <- gpt_summer_no_mc$Concept
rownames(verified_gpt_mds_summer_no_mc) = rownames(verified_gpt_dsm)
verified_gpt_mds_summer_no_mc <- verified_gpt_mds_summer_no_mc[order(rownames(verified_gpt_mds_summer_no_mc)),]
# human triplets
rownames(human_triplet_mds) <- human_triplet_mds$concept
human_triplet_mds <- human_triplet_mds[order(rownames(human_triplet_mds)),]
human_triplet_mds <- human_triplet_mds[, 3:5]
human_triplet_cosine_dist = 1-  lsa::cosine(t(data.matrix(human_triplet_mds)))
rownames(human_triplet_cosine_dist) <- human_triplet_mds$concept
# gpt triplets
rownames(gpt_triplet_mds) <- gpt_triplet_mds$concept
gpt_triplet_mds <- gpt_triplet_mds[order(rownames(gpt_triplet_mds)),]
gpt_triplet_mds <- gpt_triplet_mds[, 3:5]
gpt_triplet_cosine_dist = 1-  lsa::cosine(t(data.matrix(gpt_triplet_mds)))
rownames(gpt_triplet_cosine_dist) <- gpt_triplet_mds$concept
# gpt pairwise
gpt_pairwise <- read.csv('data/pairwise/pairwise_response_1_7_davinci_003_matrix.csv')
gpt_pairwise_cosine_dist = 1-lsa::cosine(t(data.matrix(gpt_pairwise[,2:ncol(gpt_pairwise)])))
gpt_pairwise_mds <- cmdscale(gpt_pairwise_cosine_dist, k = 3)
rownames(gpt_pairwise_cosine_dist) <- gpt_pairwise$X
colnames(gpt_pairwise_cosine_dist) <- gpt_pairwise$X
rownames(gpt_pairwise_mds) = rownames(gpt_pairwise_cosine_dist)
gpt_pairwise_mds <- gpt_pairwise_mds[order(rownames(gpt_pairwise_mds)),]
# pairwise protest all elements
matrices = list(leuven_mds, w2v_mds, clip_mds, unverified_gpt_mds_summer_no_mc, verified_gpt_mds_summer_no_mc, human_triplet_mds, gpt_triplet_mds, gpt_embed_mds, flan_xl_mds, flan_xxl_mds, gpt_pairwise_mds)
## Create an empty list to store the results
results = list()
## Iterate through all combinations of the matrices
for (i in 1:(length(matrices))) {
for (j in 1:(length(matrices))) {
# Pass the two matrices to the protest function and store the result
result = protest(matrices[[i]], matrices[[j]], symmetric=TRUE)
results = c(results, sqrt(1-result$ss))
}
}
## make the results into a table
## Create a data frame with all possible combinations of matrix names
matrix_names = list("leuven", "w2v", "clip", "unverified_gpt_summer_no_mc", "verified_gpt_summer_no_mc", "human_triplet", "gpt_triplet", "gpt_embed_mds", "flan_xl_mds", "flan_xxl_mds", "gpt_pairwise_mds")
matrix_combinations = expand.grid(matrix_names, matrix_names)
## Assign column names to the data frame
colnames(matrix_combinations) = c("matrix1", "matrix2")
## Fill in the values
k = 1
for (i in 1:length(matrix_names)) {
for (j in 1:length(matrix_names)) {
matrix_combinations[k, "result"] = results[k]
k = k + 1
}
}
protest_results =  pivot_wider(matrix_combinations, names_from = matrix1, values_from = result)
# <!-- df <- apply(protest_results,2,as.character) -->
write.table(data.frame(df), "results/correlation_table.csv", sep=",")
test <- round(as.matrix(protest_results[,2:ncol(protest_results)]),2)
upper<-test
upper[upper.tri(test)]<-""
upper<-as.data.frame(upper)
upper
rownames(upper) = colnames(upper)
library(xtable)
# pairwise protest all elements
matrices = list(leuven_mds, w2v_mds, clip_mds, unverified_gpt_mds_summer_no_mc, verified_gpt_mds_summer_no_mc, human_triplet_mds, gpt_triplet_mds, gpt_embed_mds, flan_xl_mds, flan_xxl_mds, gpt_pairwise_mds)
## Create an empty list to store the results
results = list()
flan_xxl_mds
# pairwise protest all elements
matrices = list(leuven_mds, w2v_mds, clip_mds, unverified_gpt_mds_summer_no_mc, verified_gpt_mds_summer_no_mc, human_triplet_mds, gpt_triplet_mds, gpt_embed_mds, flan_xl_mds, flan_xxl_mds, gpt_pairwise_mds)
## Create an empty list to store the results
results = list()
verified_gpt_mds_summer_no_mc
# pairwise protest all elements
matrices = list(leuven_mds, w2v_mds, clip_mds, unverified_gpt_mds_summer_no_mc, verified_gpt_mds_summer_no_mc, human_triplet_mds, gpt_triplet_mds, gpt_embed_mds, flan_xl_mds, flan_xxl_mds, gpt_pairwise_mds)
## Create an empty list to store the results
results = list()
gpt_triplet_mds
# pairwise protest all elements
matrices = list(leuven_mds, w2v_mds, clip_mds, unverified_gpt_mds_summer_no_mc, verified_gpt_mds_summer_no_mc, human_triplet_mds, gpt_triplet_mds, gpt_embed_mds, flan_xl_mds, flan_xxl_mds, gpt_pairwise_mds)
## Create an empty list to store the results
results = list()
gpt_embed_mds
# pairwise protest all elements
matrices = list(leuven_mds, w2v_mds, clip_mds, unverified_gpt_mds_summer_no_mc, verified_gpt_mds_summer_no_mc, human_triplet_mds, gpt_triplet_mds, gpt_embed_mds, flan_xl_mds, flan_xxl_mds, gpt_pairwise_mds)
## Create an empty list to store the results
results = list()
gpt_pairwise_mds
# pairwise protest all elements
matrices = list(leuven_mds, w2v_mds, clip_mds, unverified_gpt_mds_summer_no_mc, verified_gpt_mds_summer_no_mc, human_triplet_mds, gpt_triplet_mds, gpt_embed_mds, flan_xl_mds, flan_xxl_mds, gpt_pairwise_mds)
## Create an empty list to store the results
results = list()
flan_xl_mds, gpt_pairwise_mds
# pairwise protest all elements
matrices = list(leuven_mds, w2v_mds, clip_mds, unverified_gpt_mds_summer_no_mc, verified_gpt_mds_summer_no_mc, human_triplet_mds, gpt_triplet_mds, gpt_embed_mds, flan_xl_mds, flan_xxl_mds, gpt_pairwise_mds)
## Create an empty list to store the results
results = list()
flan_xl_mds
gpt_pairwise_mds
# pairwise protest all elements
matrices = list(leuven_mds, w2v_mds, clip_mds, unverified_gpt_mds_summer_no_mc, verified_gpt_mds_summer_no_mc, human_triplet_mds, gpt_triplet_mds, gpt_embed_mds, flan_xl_mds, flan_xxl_mds, gpt_pairwise_mds)
## Create an empty list to store the results
results = list()
## Iterate through all combinations of the matrices
for (i in 1:(length(matrices))) {
for (j in 1:(length(matrices))) {
# Pass the two matrices to the protest function and store the result
result = protest(matrices[[i]], matrices[[j]], symmetric=TRUE)
results = c(results, sqrt(1-result$ss))
}
}
results
# pairwise protest all elements
matrices = list(leuven_mds, w2v_mds, clip_mds, unverified_gpt_mds_summer_no_mc, verified_gpt_mds_summer_no_mc, human_triplet_mds, gpt_triplet_mds, gpt_embed_mds, flan_xl_mds, flan_xxl_mds, gpt_pairwise_mds)
## Create an empty list to store the results
results = list()
## Iterate through all combinations of the matrices
for (i in 1:(length(matrices))) {
for (j in 1:(length(matrices))) {
# Pass the two matrices to the protest function and store the result
result = protest(matrices[[i]], matrices[[j]], symmetric=TRUE)
results = c(results, sqrt(1-result$ss))
}
}
## make the results into a table
## Create a data frame with all possible combinations of matrix names
matrix_names = list("leuven", "w2v", "clip", "unverified_gpt_summer_no_mc", "verified_gpt_summer_no_mc", "human_triplet", "gpt_triplet", "gpt_embed_mds", "flan_xl_mds", "flan_xxl_mds", "gpt_pairwise_mds")
matrix_combinations = expand.grid(matrix_names, matrix_names)
## Assign column names to the data frame
colnames(matrix_combinations) = c("matrix1", "matrix2")
## Fill in the values
k = 1
for (i in 1:length(matrix_names)) {
for (j in 1:length(matrix_names)) {
matrix_combinations[k, "result"] = results[k]
k = k + 1
}
}
protest_results =  pivot_wider(matrix_combinations, names_from = matrix1, values_from = result)
protest_results
df
# pairwise protest all elements
matrices = list(leuven_mds, w2v_mds, clip_mds, unverified_gpt_mds_summer_no_mc, verified_gpt_mds_summer_no_mc, human_triplet_mds, gpt_triplet_mds, gpt_embed_mds, flan_xl_mds, flan_xxl_mds, gpt_pairwise_mds)
## Create an empty list to store the results
results = list()
## Iterate through all combinations of the matrices
for (i in 1:(length(matrices))) {
for (j in 1:(length(matrices))) {
# Pass the two matrices to the protest function and store the result
result = protest(matrices[[i]], matrices[[j]], symmetric=TRUE)
results = c(results, sqrt(1-result$ss))
}
}
## make the results into a table
## Create a data frame with all possible combinations of matrix names
matrix_names = list("leuven", "w2v", "clip", "unverified_gpt_summer_no_mc", "verified_gpt_summer_no_mc", "human_triplet", "gpt_triplet", "gpt_embed_mds", "flan_xl_mds", "flan_xxl_mds", "gpt_pairwise_mds")
matrix_combinations = expand.grid(matrix_names, matrix_names)
## Assign column names to the data frame
colnames(matrix_combinations) = c("matrix1", "matrix2")
## Fill in the values
k = 1
for (i in 1:length(matrix_names)) {
for (j in 1:length(matrix_names)) {
matrix_combinations[k, "result"] = results[k]
k = k + 1
}
}
protest_results =  pivot_wider(matrix_combinations, names_from = matrix1, values_from = result)
df <- apply(protest_results,2,as.character)
df
write.table(data.frame(df), "results/correlation_table.csv", sep=",")
